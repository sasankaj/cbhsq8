Instructions for setting up CBHSQ Drupal 8 environment on docksal

1. Download the cbhsq project files from office.com - cbhsq8.zip

2. Extract the contents of the project zip file into your projects directory (/projects/cbhsq8)

3. in your terminal, go to the cbhsq project directory and run this command

    $ cd /../projects/cbhsq8
    $ fin start up

Note: 'fin start' will also work, but the option 'up' forces docksal to re-read the configuration files
and update any changes that might have been made.

4. Run the following command to grant all privileges on database 'drupal_cbhsq8' to user 'cbhsq_user'
    $ fin db cli
    mysql> Grant all privileges on drupal_cbhsq8.* to user;

5. Exit from mysql console and from the project root directory,
import the sql backup file to the 'drupal_cbhsql8' database

    $ fin db import --db=drupal_cbhsq8 ./database_dumps/drupal_cbhsq_17_Jan_2017_11_AM.sql

6. Login to the data sites using the credentials:
    url:  http://cbhsq8.docksal/
    user: admin
    password: password

----------------------------
Extra check:

1. To Verify if everything is setup correctly, restart your project services:

    $ fin vm restart

To get the status of all your project services use:

    $ fin status

If everything is setup properly, you should see this on your console: 

      Name                   Command             State             Ports
-----------------------------------------------------------------------------------
cbhsq8_browser_1   /opt/bin/entry_point.sh       Up      4444/tcp
cbhsq8_cli_1       /opt/startup.sh supervisord   Up      22/tcp, 9000/tcp
cbhsq8_db_1        /entrypoint.sh mysqld         Up      0.0.0.0:33061->3306/tcp
cbhsq8_mail_1      MailHog                       Up      1025/tcp, 80/tcp, 8025/tcp
cbhsq8_web_1       httpd-foreground              Up      443/tcp, 80/tcp

Here,
    cbhsq8_browser_1 is a pseudo-browser service used by selenium for behat testing
    cbhsq8_cli_1 provides console tools necessary to develop LAMP stack applications like our drupal site.
    cbhsq8_db_1 is a docker database service
    cbhsq8_mail_1 service is used to catch all outgoing mails from your local docksal site
    cbhsq8_web_1 is the web service (apache web server) on which your site is run.

If any of these service is not 'Up', there could be a problem in your setup.


------------------------
Site Usage and Management Instructions

1. In Drupal 8 any new contributed module or theme should be installed using composer. 

    1a. To download contributed Drupal modules or themes with composer:

        Run composer require drupal/<modulename>
        For example: composer require drupal/token
        This needs to be executed at the root of your Drupal install. Composer will then automatically update your composer.json as follows:

        {
            "require": {
                "drupal/token": "1.x-dev"
            }
        }

        Composer will also download the module and all the possible dependencies it may have.

        You can also add in development modules as --dev dependencies (these modules should only be present in the codebase locally, never on production!):

        $ composer require drupal/devel --dev

        You can enable the module either by using the normal browser user interface.
        Or, if you use Drush, you can enable the module by using

        fin drush @cbhsq8.local en <modulename> -y

        and to check the status of all modules and themes in your site use

        $ fin drush @cbhsq8.local pm-list

    1b. To get a specific version of a module or theme, you can specify the version of the module / theme you want to download as follows:

        composer require "drupal/<modulename>:<version>"

        For example:

        $ composer require "drupal/token:1.x-dev"

    1c. If you are unsure of the exact name of the module / theme you are trying to install, use cn use the composer search command as follows:

        composer search <modulename>

        For example: $ composer search drupal/token

        This will search for 'token' in all the drupal modules available to composer and list them.
        To limit your search only to the module names, use the --only-name option

        For example: $ composer search drupal/token --only-name

    1d. After installing new modules/themes or updating your code base ensure that your composer.json is valid by running the composer validate command:

        $ composer validate

        If you see any warnings when you run the composer validate command, update your composer as follows:

        $ composer update

2. Use drush to manage your drupal site via terminal/commandline

    2a. To clear your site cache, use the drush cr command as follows:

        For example: $ fin drush @cbhsq8.local cr

    2b. To get a list of modules and themes that are available for your Drupal site, use hte pm-list command as folows:

        $ fin drush @cbhsq8.local pm-list

        and to look at the status of a specific module, use:

        $ fin drush @cbhsq8.local pm-list | grep token

    2c. To Enable or disable a drupal module on your site, use teh drush en/dis command as follows:

        For example:
        To disable a module: $ fin drush @cbhsq8.local dis token
        To enable a module: $ fin drush @cbhsq8.local en token

    2d. To get all the details of your site along with its current status, use drush status command as follows:

        $ fin drush @cbhsq8.local status

    2e. To get detailed information about any module in your site use the drush pm-info command as follows:

        $ fin drush @cbhsq8.local pm-info token

    2f. To get the recent log messages, use teh drush watchdog-show command as follows:

        $ fin drush @cbhsq8.local watchdog-show

    2e. To get help with any drush command, use the help option:

        To list all available drush commands use

        $ drush help

        To get help on a specific drush command, use:

        $ drush help status


3. Drupal stores site configuration data in a consistent manner: everything from the list of enabled modules,
through to content types, taxonomy vocabularies, fields, and views are stored in the database ("config" table).

Exporting and importing configuration changes between a Drupal installation in different environments, such as Development,
Staging, and Production. This allows you to make and verify your changes with a comfortable distance from your site's live environment.

Configurations in Drupal 8 can be exported and imported as YAML files, either in its entirety, or a single piece of configuration,
using Drush config commands or the Configuration Manager. This allows you to deploy a configuration from one environment to another

In our site, site configurations are managed through 'configuration synchronization' provided under drupal core and
'config_split' a contributed module. Our site configuration will export all your changes to separate directories
depending on the enviornment you are working on, and imports all changes into your local database after merging them.

As part of the configuration split settings on our site, we have already configured the following

Local - Config split settings for your local environment.
Dev - Config split settings for Dev environment.
Stage - Config split settings for Stage/QA environment. (Currently inactive)
Prod - Config split settings for Production environment. (Currently inactive)
CI - Config split settings used during integration (by Travis, Pipelines, etc.). (Currently Inactive)

    3a. If you install any new module on your local environment (ex. Devel module), or change system settings (ex. logging level),
    then you have to first install the module using composer

        $ composer require drupal/devel --dev

    Once the module is installed and enabled, update config split settings for your local environment.

         i. Configure the 'Local' config split  (on http://cbhsq8.docksal/admin/config/development/configuration/config-split/local/edit)
        ii. Under 'Complete Split', select the 'Modules' for the Local split (e.g. select Devel in the 'Modules' listing).
       iii. Under 'Complete Split', select all the module's 'configuration items'
       (use Command on Mac, or Ctrl on Windows to multi-select, e.g. select devel.settings, devel.toolbar.settings, and system.menu.devel).
        iv. Click 'Save' to save the config split.

    If you made any changes to the local configuration configuration settings (ex. db logging levels) that you dont
    want to be committed to DEV/Stage/Prod environments

         i. Configure the 'Local' config split  (on http://cbhsq8.docksal/admin/config/development/configuration/config-split/local/edit)
        ii. Under 'Conditional Split', select all the 'configuration items' that were changed
        (use Command on Mac, or Ctrl on Windows to multi-select, e.g. select devel.settings, devel.toolbar.settings, and system.menu.devel).
        iv. Click 'Save' to save the config split.

    NOTE: You can see all the changes that were made to your local configuration by going to
        admin/config/development/configuration (http://cbhsq8.docksal/admin/config/development/configuration)

    Once the config split changes are made, export your local configuration using steps in 3b. below and commit your changes.

    If you just refreshed your environment using the production code, then import the configuration changes from production
    into your local environment using steps in 3c. below, before you make any local changes.

    3b. Any changes you make to the sites configuration when doing local development—
    from adding a content type, to removing a field, modifying a view, or even something mundane like changing the site's name—
    can be exported to code via drush cex command as follows:

        $ fin drush @cbhsq.local cex -v

        This will export the updated configuration on your local site to 'config/default' directory (and/or 'config/local' directory) inside the project root.

    3c. To import any external changes into your local site (for example: changes made in production), use the drush cim command as follows:

        $ fin drush @cbhsq.local cim -v

        This will import the configuration file from 'config/default' directory (and/or 'config/local' directory) inside the project root into your local site.


4. To start/stop your docksal machine use the fin vm start/stop commands:

    To start your docksal project services:
        $ fin vm start

    To stop your docksal project services:
        $ fin vm stop

    To restart your project services:

        $ fin vm restart


5. Behat is a php based Behavior-Driven Development framework  for autotesting your requirements and business expectations.

Behat is used as a tool to close the Behavior Driven Development (BDD) communication loop. This communication happens in
a form that both the business and developers can clearly understand- examples. Examples are structured around the
Context-Action-Outcome pattern and are written in a special format called Gherkin (http://behat.org/en/latest/user_guide/gherkin.html).
Since Gherkin is a very structural language, makes it very easy to automate and autotest your behaviour examples against
a developing application. Automated tests are then actually used to drive the application development in TDD-style.

In our environment behat behavioral tests are runs using a basic browser emulator using the Goutte driver. For tests
requiring javascript support, selenium2-driver is used.

To create your own behat tests, you have to convert your requirements into behat features.
For example:

  Scenario: Log in as a user with specific permissions
    Given I am logged in as a user with the "Administer content types" permission
    When I go to "admin/structure/types"
    Then I should see the link "Add content type"

All the testable scenarios for each requirement/feature are placed in a separate '.feature' file inside the 'tests/behat/features' directory.

By default, Behat comes with a default testsuite, which tells Behat to search for features under 'tests/behat/features'
folder (this location was changed from default behat configuration for our site) and test them using FeatureContext class.
To tell behat how to test your scenarios, you have to include application code to fulfil each scenario. These impelementations
should be placed in the 'tests/behat/features/bootstrap' directory. Once you have your features and their implementations ready, 
you can execute your test cases by using the fin behat command.

To execute each feature separately, pass the feature name as argument to the fin behat command
For example, to execute all scenario's under drush.feature, you can execute -

    $ fin behat features/drush.feature


If you would like to execute all your behat test cases for multiple features/requirements at once, place all the required feature files
inside a new directory under the features directory. For example, if you would like to test for a user login functionality,
place all your features for testing user login under a 'user_login' directory inside 'tests/behat/features'. Then you
can execute all your test cases for user login functionality by passing this directory to behat command

    $ fin behat features/user_login/


If you would like to execute all your features at once (not recommended), pass the features directory path to the fin behat command

    $ fin behat features/


6. PHPUnit configuration has been updated to provide a test suite to run your unit tests. When you write your unit test cases, 
they should be written on a per-module basis and
    - the suffix of the testcase filename should be Test.php, e.g. MonthRangeTest.php
    - the test case files should all reside in the directory /MY_MODULE/tests/src/ or a sub directory inside /MY_MODULE/tests/src/

To run each phpunit test case separately, you can provide the path of test case file to the fin phpunit command :

    $ fin phpunit ./docroot/modules/contrib/coffee/tests/src/Functional/CoffeeTest.php

To run all your phpunit test cases inside a directory, provide a path to that directory to fin phpunit command:

    $ fin phpunit ./docroot/modules/contrib/coffee/tests/


7. To maintain coding standards, PHP Codesniffer for Drupal has been configured for this site. Whenever you are commit your code changes to git,
   all your changes will be automatically checked for coding standards and if there are any violations of coding standards, the code will not be committed.

   Also, when committing your changes to git, a commit message is mandatory and the message should:

     - Contain the project prefix followed by a hyphen
     - Contain a ticket number followed by a colon and a space
     - Be at least 15 characters long and end with a period.

   For example:

        Cbhsq8-135: Added the new picture field to the article feature.


   If you would like to manually check your code against the drupal coding standards, you can do so with the fin phpcs command :

        $ fin phpcs ./docroot/modules/custom/location_tagging/
